					dockerbuild
dockerize -> image oluşturmadan önce kimin hangi sırayla nasıl olduğnu ayarlar. depends on gibi daha iyi seviye.
her servis için indirmen gerek
docker build --force-rm -t alp . -> always delete intermediate containerları silerek storage'den az yer almak.
			profil env -> options
ENV SPRING_PROFILES_ACTIVE docker,mysql -> profil atayarak hangi porta gitmesini veya mysql mi daha farklı bi db mi ona seçer
profile diyorsunki -> docker da çalışsacak. eğer boş bırakırsan localhostta çalışır. ve her containerin kendi localhostu olur ve
birbirleriyle iletişime geçemez.
			öncelik
config ve discorvery öncelik olmalı.depends ons dockercomposede da.s
			mvn
./mvnw clean package -> önceki dosyaları sil ondan sonra tekrar kur
			docker-compose
	serviserin isimlerine bakarken profilerine bakıp. boostrap bakarak servis adlarına bakabilirsin.
örnek -> api-gateway-src-main-resources-bootstrap.yaml -> hangi profile ise ordan url al
	version 2'den üstü -> limit koyamıyorsun
	dockerize kullanımı. işte burada 'wait'. config-server gelene kadar bekle.160 sn. "--" -> ikki komudu bölen komut. ikisi ayrı komut olduğunu anlatır linux komutu
entrypoint: ["./dockerize", "-wait=tcp://config-server:8888", "-timeout=160s", "--", "java", "-Djava.security.egd=file:/dev/./urandom","-jar","/app.jar"]
	docker-compose -f docker-compose-local.yml up
			jenkins steup
GitHub Integration`,  `Docker`,  `Docker Pipeline`, and `Jacoco -> unit testler
jenkins github integration -> */feature** -> featurela başlayan bütün branchler
			test-pipeline jenkins shell komut -> container oluştur.maven:3.8-openjdk-11 image'ten. 2 volume oluştur. ilki .m2 ile cache oluşturup. ikincisi java app test için.
echo 'Running Unit Tests on Petclinic Application'
docker run --rm -v $HOME/.m2:/root/.m2 -v `pwd`:/app -w /app maven:3.8-openjdk-11 mvn clean test 
-> container çalştrığında testi başlat.
-v local'den cache yapmak için. dependencies ikide bir inmesin. -> agent oluşturmadan mvn clean test etmek için.

			post-build action
Record JaCoCo coverage report

Change build status according to the defined thresholds -> hedef koyma

			webhook
http://44.192.53.1:8080/github-webhook/ -> webhook payload url website:8080/github-webhook/ -> koyman gerek
			selenium -> fun'ları test etme-> toolu

			nightly pipeline .png-> plan -> create k8s, create app image push and deploy, start selenium
		14 - Create Docker Registry for Dev Manually

		15 - Create a QA Automation Environment with Kubernetes - Part-1
terraform -> main.tf oluşturaalım. 3 instance + sg
subnet değiştir. kendi 1a'nı bul. subnetlerle değiştir.-> 193-177-161

		self ortak sg oluşturup iki node arasında iletişim. not professional. 3 sg ile ara bağlantı kurmak.
 -> aynı sgler bağlı olan makineler birbirleriyle iletişime geçsin."-1" bütün portlar
terraform deadlock'tan kurtulmak için.

helm repo için -> s3 

key-pair oluşturmayız. çünkü hep kendisi oluştracak. böyle onu sed komudu ile değiştireceğiz. daha secure çünkü
		16 - Create a QA Automation Environment with Kubernetes - Part-2
test-creating-qa-automation-infrastructure - freeproject ayarla. branch branch test edicez.
ilk olarak her birimi test et -> branch ->*/feature/msp-16
